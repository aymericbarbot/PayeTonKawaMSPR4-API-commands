name: ci-dev     # pipeline pour chaque push dans ci-test

on:
  push:
    branches: [ci-test]

permissions:
  contents: write        # rollback éventuel

env:
  COMPOSE_FILE: docker-compose.yml   # change si tu utilises un autre nom

jobs:
# ───────────────────────────────
  unit:
    runs-on: ubuntu-latest
    name: tests unitaires

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: npm ci + build + test
        run: |
          npm ci
          npm run build
          npm test
# ───────────────────────────────
  stack-check:
    needs: unit
    runs-on: ubuntu-latest
    name: start & stop compose

    steps:
      - uses: actions/checkout@v4

      - name: Build + up (-d)
        run: |
          docker compose -f "$COMPOSE_FILE" up -d --build

      # Si le up -d réussit (code 0) la stack est démarrée correctement.
      # On peut — optionnel — attendre quelques secondes ou vérifier "docker compose ps".

      - name: Down & clean
        run: |
          docker compose -f "$COMPOSE_FILE" down -v --remove-orphans
# ───────────────────────────────
  # Si l'un des deux jobs ci-dessus échoue, on rollback la branche
  handle-failure:
    needs: [unit, stack-check]
    if: failure()          # s’exécute uniquement si un job a échoué
    runs-on: ubuntu-latest
    env:
      ERR_BRANCH: error-${{ github.sha }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Git config bot
        run: |
          git config user.email "bot@github"
          git config user.name  "github-actions"

      - name: Branch error + rollback
        run: |
          git switch -c "$ERR_BRANCH"
          git push origin "$ERR_BRANCH"
          git switch ci-test
          git reset --hard HEAD~1
          git push --force-with-lease origin ci-test